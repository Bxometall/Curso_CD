name: Entrega Continua

on:
  workflow_call:

jobs:
  EC2:
    runs-on: ubuntu-latest
    steps:
      - name: Download a Build Artifact # baixando o binário compilado da aplicação em Go
        uses: actions/download-artifact@v3.0.0
        with:
          # Artifact name
          name: programa

      - uses: actions/checkout@v3 # para ter os arquivos estáticos da aplicação (html, css...)

      - name: Deploy to Staging server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          ARGS: "-rlgoDzvc -i"
          # SOURCE: "dist/"
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }} # no painel da EC2, seleciona sua instancia e nos detalhes dela já tem o IPV4 público
          REMOTE_USER: ${{ secrets.REMOTE_USER }} # com sua instancia selecionada, clica em conectar, lá tem o usuário
          # TARGET: ${{ secrets.REMOTE_TARGET }}
          TARGET: /home/${{ secrets.REMOTE_USER }}
          # EXCLUDE: "/dist/, /node_modules/, /postgres-data/"
          EXCLUDE: "postgres-data"

      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          # password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # port: ${{ secrets.PORT }}
          port: 22
          script: |
            export HOST=${{ secrets.DBHOST }}
            export USER=${{ secrets.DBUSER }}
            export PASSWORD=${{ secrets.DBPASSWORD }}
            export DBNAME=${{ secrets.DBNAME }}
            export DBPORT=${{ secrets.DBPORT }}
            export PORT=8000
            chmod +x main
            nohup ./main > nohup.out 2> nohup.err < /dev/null &
          # pra eu lembrar apenas, estou usando o usuário padrao do postgres que é postgres kek,
          # outra coisa, a senha é a senha quando vc cria o banco no RDS, DBName msm da fase de testes => root
          # mais uma, esse PORT é a porta onde a aplicacao vai rodar
          # nohup config:
          # o programa nohup gera uma saída onde iremos armazenar no nohup.out com o comando > (maior q)
          # os erros irão ser a segunda saída, isso é default, então pegamos o segundo item e armazenamos: 2> nohup.err
          # Entradas, caso seu script espere uma entrada, seu programa
          # para configurar e não ter problema casooooo tenha alguma entrada e não seja passada podemos por o seguinte:
          # < /dev/null, com isso a gente sabe que ele sempre irá receber um NULL na entrada, assim a app não congela
